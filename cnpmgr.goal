init module{
	knowledge{
		%Calculate the amount of elevators
		amountOfElevators(N) :- findall(A, agent(A), L), length(L,X), N is X - 1.
	}
	beliefs{
	}
	goals{
	}
}

main module{
	program{
	}
}

event module{
	program{
		%Store capacity and remember name of agents	
		forall bel(received(Sender,capacity(N))) do insert(capacity(Sender,N)) + insert(agent(Sender)). 
		
		%Store and update the 'atFloor' message of each agent, then we know if a agent is moving or not	
		forall bel(received(Sender,atFloor(Level)), not(atFloor(Sender,Level))) do insert(atFloor(Sender,Level)).
		forall bel(received(Sender,not(atFloor(Level))), atFloor(Sender,Level)) do delete(atFloor(Sender,Level)).
		
		%Store or delete each fButton presses
		forall bel(received(Sender,fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir))) do insert(fButtonOn(Level,Dir)) + insert(not(assigned(Level,Dir))) +  insert(amountOfScores(Level, Dir, 0)).
		forall bel(received(Sender,not(fButtonOn(Level,Dir))), fButtonOn(Level,Dir)) do delete(fButtonOn(Level,Dir)).
		
		%Let's check for fButton presses that are not assigned to an elevator
		forall bel(fButtonOn(Level,Dir), agent(X), not(me(X)), not(sent(X, calculateScore(Level, Dir))), not(assigned(Level,Dir))) do (X).send(calculateScore(Level, Dir)).
		
		%Handle the incoming scores from the elevators
		forall bel(received(Sender, score(Level,Dir,Score)), not(assigned(Level,Dir)), score(Sender,Level,Dir,OldScore)) do insert(score(Sender,Level,Dir,Score)) + delete(score(Sender,Level,Dir,OldScore)).
		forall bel(received(Sender, score(Level,Dir,Score)), not(assigned(Level,Dir)), not(score(Sender,Level,Dir,OldScore))) do insert(score(Sender,Level,Dir,Score)).
		
		forall bel(score(Sender,Level, Dir, Score), amountOfScores(Level, Dir, X), Y is X + 1) do delete(amountOfScores(Level, Dir, X)) + insert(amountOfScores(Level, Dir, Y)).
		
		%Check if we received a score from all the elevators
		if bel(score(Sender,Level,Dir,Score), amountOfScores(Level,Dir,Y), not(assigned(Level, Dir)) , amountOfElevators(X), Y == X ) then{
			%check its score of each agent
				
			if bel(score(Sender, Level, Dir, Score)), not(bel(score(Sender1, Level, Dir, Score2), Score2 > Score)) then (Sender).send(task(Level,Dir)) + insert(assigned(Level, Dir)).
	
			% Clean-up after the task is assigned to elevator
			forall bel(amountOfScores(Level,Dir,X)) do delete(amountOfScores(Level,Dir,X)). 
			forall bel(score(Sender,Level,Dir,Score)) do delete(score(Sender,Level,Dir,Score)).
		}
		
		
		
		%Handle the messages from agent that notify that has completed their task
		forall bel(received(Sender, taskCompleted(Y,Dir)), assigned(Y,Dir)) do delete(assigned(Y,Dir)).
		
		%clean up the mailbox
		%forall bel(received(Agent, Message)) do delete(received(Agent, Message)).
		%forall bel(sent(Agent, Message)) do delete(sent(Agent, Message)).
		
	}
}